@@whitespace :: / /
@@keyword :: case match lazy val var override def implicit object class trait
@@keyword :: import package super if else while for do throw try catch finally
@@keyword :: null this new true false extends with final private protected
@@keyword :: forSome

nl1 = [comment:eolComment] nl:'\n';
nl = {nl1}+;
seminl = semi:';' [nl:nl];
eol = nl | seminl;

UnicodeEscape = '\u' {'u'} HexDigit HexDigit HexDigit HexDigit;
HexDigit = /[0-9A-Fa-f]/;
WhiteSpace = '\u0020' | '\u0009' | '\u000D' | '\u000A';
Upper = /[A-Z$]/;
Lower = /[a-z]/;
Letter = Upper | Lower;
Digit = /\d/;
paren = '(' | ')' | '[' | ']' | '{' | '}';
delim = '`' | "'" | '"' | '.' | ';' | ',';
assign = op:'=' !Opchar [nl:nl];
wildcard = '_';
Wildcard = /_/;
arrow = arrow:'=>' !Opchar [nl:nl];
enumeratorArrow = '<-';
projectOp = '#';
OpcharBlocker =
  | Upper
  | Lower
  | Letter
  | Digit
  | paren
  | delim
  | blockCommentStart
  | eolCommentStart
  ;
PrintableChar = /[\u0020-\u007F]/;
PrintableCharNoWs = /[\u0021-\u007F]/;
Opchar = !OpcharBlocker PrintableCharNoWs;
CharEscapeSeq = '\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\');
lpar = par:'(' [nl:nl];
rpar = [nl:nl] par:')';
lbrace = brace:'{' [nl:nl];
rbrace = [nl:nl] brace:'}';
lbrack = brack:'[' [nl:nl];
rbrack = [nl:nl] brack:']';
prefixOperator = '-' | '+' | '~' | '!';
syntaxOperator =
  | arrow
  | assign
  | enumeratorArrow
  ;
this = 'this';

booleanLiteral = 'true' | 'false';
integerLiteral(token) = (decimalNumeral | hexNumeral) ['L' | 'l'];
negativeIntegerLiteral = minus:'-' value:integerLiteral;
decimalNumeral(token) = '0' | nonZeroDigit {Digit};
hexNumeral(token) = '0' ('x' | 'X') HexDigit {HexDigit};
nonZeroDigit(token) = /[1-9]/;

floatingPointLiteral(token) =
  {Digit}+ '.' {Digit}+ [exponentPart] [floatType]
  | '.' {Digit}+ [exponentPart] [floatType]
  | {Digit}+ exponentPart [floatType]
  | {Digit}+ [exponentPart] floatType;
negativeFloatingPointLiteral = minus:'-' value:floatingPointLiteral;
exponentPart = ('E' | 'e') ['+' | '-'] {Digit}+;
floatType = 'F' | 'f' | 'D' | 'd';

CharNoQuoteOrNewline = !(nl | "'") PrintableChar;
CharNoDoubleQuote = !'"' PrintableChar;
CharNoDoubleQuoteOrNewline = !(nl | '"') PrintableChar;
characterLiteral = "'" (CharNoQuoteOrNewline | UnicodeEscape | CharEscapeSeq) "'";

StringElement = CharNoDoubleQuoteOrNewline
  | UnicodeEscape
  | CharEscapeSeq;
stringLiteralData(token) = {StringElement};
SingleQuote = '"';
openingSingleQuote = [context:plainidName] quote:SingleQuote;
TripleQuote = '"""';
openingTripleQuote = [context:plainidName] quote:TripleQuote;
singleLineStringLiteral = lquote:openingSingleQuote data:stringLiteralData
rquote:'"';
multiLineChars = {['"'] ['"'] (CharNoDoubleQuote | '\n')};
multiLineStringLiteral = lquote:openingTripleQuote data:multiLineChars
rquote:'"""';
stringLiteral =
  | multiLineStringLiteral
  | singleLineStringLiteral
  ;
symbolLiteral = "'" plainidName;

blockCommentStart = '/*';
blockCommentEnd = '*/';
blockCommentChar1 = /./ | nl;
blockCommentChar = !blockCommentEnd blockCommentChar1;
eolCommentStart = '//';
eolCommentChar = !nl /./;
blockCommentContent(token) = {blockCommentChar};
eolCommentContent(token) = {eolCommentChar};
blockComment = start:blockCommentStart content:blockCommentContent
end:blockCommentEnd;
eolComment = start:eolCommentStart content:eolCommentContent &nl;
comment =
  | blockComment
  | eolComment
  ;

OpBlocker = syntaxOperator !Opchar;
op(token) = !OpBlocker {Opchar}+;
IdWildcard = Wildcard !Opchar;
IdLetter = Letter | IdWildcard;
plainidNoToken = IdLetter {IdLetter | Digit};
plainid(token) = IdLetter {IdLetter | Digit};
@name plainidName = plainid;
idOpSuffix(token) = plainidName Wildcard {Opchar}+;
quotedId = '`' stringLiteralData '`';
id =
  | idOpSuffix
  | plainidName
  | op
  | quotedId
  ;

case = 'case';
match = 'match';
typekw = 'type';

literal =
  | negativeIntegerLiteral
  | integerLiteral
  | negativeFloatingPointLiteral
  | floatingPointLiteral
  | booleanLiteral
  | characterLiteral
  | 'null'
  | stringLiteral
  | symbolLiteral
  ;

qualId = id {'.' id};
ids = id {',' id};

classQualifier = lbrack:lbrack id:id rbrack:rbrack;
superAttrPre = id:id dot:'.';
superAttr =
[pre:superAttrPre] superkw:'super' [qual:classQualifier] dot:'.' attr:id;
stableId =
  | thisRef
  | superAttr
  | id
  ;
thisRef = [id '.'] 'this';
selectrest = dot:'.' id:id;
select = head:stableId {tail:selectrest}+;
path =
  | select
  | id
  ;

functionArgTypes = infixType
  | '(' [ paramType {',' paramType } ] ')';
existentialClause = 'forSome' '{' existentialDcl {eol existentialDcl} '}';
existentialDcl = typekw typeDcl
  | 'val' valDcl;
typeProjection = regularType projectOp id;
dependentType = path '.' typekw;
parenthesizedTypes = lpar:lpar types:types rpar:rpar;
simpleType =
  | typeProjection
  | dependentType
  | parenthesizedTypes
  | select
  | stableId
  ;
typeArgs = lbrack:lbrack types:types rbrack:rbrack;
refinementTemplate = [nl] '{' refineStat {eol refineStat} '}';
refineStat = dcl
  | typeDef;
appliedType = simple:simpleType args:typeArgs;
regularType =
  | appliedType
  | simpleType
  ;
annotType = tpe:regularType anno:{annotation}+;
annotOrRegularType =
  | annotType
  | regularType
  ;
refinementSubtype = withkw:'with' type:annotOrRegularType;
refinementsOnlySubtype = {refinementSubtype}+;
refinementsWithTemplate = {subtype:refinementSubtype} templ:refinementTemplate;
refinements =
  | refinementsOnlySubtype
  | refinementsWithTemplate
  ;
refinedType = compoundpre:annotOrRegularType refine:refinements;
compoundType =
  | refinedType
  | refinementTemplate
  # | simpleType
  ;
infixTypeRest = infix:id [nl:nl] rhs:compoundType;
infixType = infixhead:compoundType infixtail:{infixTypeRest}+;
functionType = args:functionArgTypes arrow:arrow tpe:type;
infixExistentialType = tpe:infixType exi:existentialClause;
type =
  | functionType
  | infixExistentialType
  | infixType
  | compoundType
  | annotType
  | regularType
  ;
typesTail = comma:',' tpe:type;
types = head:type tail:{typesTail};

ascription = ':' infixType
  | ':' annotation {annotation}
  | ':' wildcard '*';

patMat = scrutinee:simpleOrCompoundExpr match:match lbrace:lbrace
cases:caseClauses rbrace:rbrace;


bindings = '(' [binding {',' binding}] ')';
binding = (id | wildcard) [':' type];

# FIXME explicitly list acceptable exprs instead of infixExpr
# do the same with other epxrs
postfixExpr = infixExpr id &eol;
infixOper =
  | classInstantiation
  | applyExpr
  | attrExpr
  | prefixExpr
  | infixExpr
  | simpleExpr
  ;
# NOTE expr seems to work for prefixExr for the right operand, check more
infixExpr = left:infixOper method:id [nl:nl] right:expr;
prefixExpr = prefix:prefixOperator expr:simpleExpr;
simpleAssignExpr = id:id assign:assign rhs:expr;
attrAssignExpr = lhs:attrExpr assign:assign rhs:expr;
applyAssignExprPre =
  | parenthesizedExprsExpr
  | path
  | wildcard
  ;
applyAssignExpr =
expr:applyAssignExprPre app:argumentsExpr assign:assign rhs:expr;
assignExpr =
  | attrAssignExpr
  | simpleAssignExpr
  | applyAssignExpr
  ;
argumentExpr =
  | simpleAssignExpr
  | expr
  ;
argumentExprsTail = [nl1:nl] comma:',' [nl2:nl] arg:argumentExpr;
argumentExprs = head:argumentExpr tail:{argumentExprsTail};
arguments = lpar:lpar [args:argumentExprs] rpar:rpar;
argumentSplat =
expr:simpleOrCompoundExpr colon:':' wildcard:wildcard aster:'*';
argumentsWithSplat =
lpar:lpar regular:[args:argumentExprs comma:','] splat:argumentSplat rpar:rpar;
# FIXME nl before block? foo { a } is ok, but foo \n { a }?
argumentsBlock = [nl] block;
argumentsExpr =
  | argumentsWithSplat
  | arguments
  | argumentsBlock
  ;
parenthesizedInfixExpr =
left:infixOper [nl1:nl] method:id [nl2:nl] right:parenthesizedExpr;
parenthesizedExpr =
  | parenthesizedInfixExpr
  | expr
  ;
parenthesizedExprs =
head:parenthesizedExpr {[nl1:nl] comma:',' [nl2:nl] parenthesizedExpr};
parenthesizedExprsExpr = lpar:lpar [exprs:parenthesizedExprs] rpar:rpar;
simpleExprPre =
  | literal
  | attrExpr
  | simpleExprTypeArgs
  | simpleExpr
  | path
  | parenthesizedExprsExpr
  | wildcard
  ;
attrExprPre =
  | literal
  | stableId
  | parenthesizedExprsExpr
  | wildcard
  | classInstantiation
  ;
attrExpr = head:attrExprPre tail:{selectrest}+;
attrExprTypeArgs = expr:attrExpr typeargs:typeArgs;
applyExprPre =
  | attrExprTypeArgs
  | attrExpr
  | simpleExprPre
  ;
applyExpr1 = pre:applyExprPre args:{argumentsExpr}+;
applyExprChain = {dot:'.' id:id}+ args:{argumentsExpr};
applyExpr = head:applyExpr1 tail:{applyExprChain};
simpleExpr1 =
  | literal
  | parenthesizedExprsExpr
  | applyExpr
  | path
  | wildcard
  | this
  ;
classInstantiation = new:'new' templ:(classTemplate | template);
etaPre =
  | simpleExprTypeArgs
  | simpleExpr1
  ;
etaExpansion = expr:etaPre wildcard:wildcard;
simpleExprTypeArgs = expr:simpleExpr1 typeargs:typeArgs;
simpleExpr =
  | simpleExprTypeArgs
  | simpleExpr1
  ;
compoundExpr =
  | block
  | infixExpr
  | prefixExpr
  | postfixExpr
  | assignExpr
  | etaExpansion
  | applyExpr
  | attrExprTypeArgs
  | attrExpr
  | classInstantiation
  ;
simpleOrCompoundExpr =
  | compoundExpr
  | simpleExpr
  ;
ifExpr = 'if' '(' expr ')' {nl} expr [[eol] 'else' [nl] expr];
whileExpr = 'while' '(' expr ')' {nl} expr;
catchExpr = 'catch' [nl] caseBlock;
finallyExpr = 'finally' expr;
tryExpr = 'try' [nl] (statBlock | expr) [[nl] catchExpr] [[nl] finallyExpr];
doExpr = 'do' expr [eol] 'while' '(' expr ')';
forExpr = 'for' ('(' enumerators ')' | '{' enumerators '}') {nl} ['yield']
expr;
throwExpr = 'throw' expr;
returnExpr = 'return' [expr];
controlExpr =
  | ifExpr
  | whileExpr
  | tryExpr
  | doExpr
  | forExpr
  | throwExpr
  | returnExpr
  ;
anonFuncExprParamImplicit = implicitkw:'implicit' id:id;
anonFuncExprParams =
  | bindings
  | anonFuncExprParamImplicit
  | id
  | wildcard
  ;
# TODO expr isn't reachable?
anonFuncRhs =
  | blockBody
  | expr
  ;
anonFuncExpr = params:anonFuncExprParams arrow:arrow rhs:anonFuncRhs;
ascribedSimpleOrCompoundExpr = simpleOrCompoundExpr ascription;
expr =
  | anonFuncExpr
  | controlExpr
  | patMat
  | simpleOrCompoundExpr
  | ascribedSimpleOrCompoundExpr
  ;
exprsTail = comma:',' expr:expr;
exprs = head:expr tail:{exprsTail};

enumerators = generator {eol generator};
generator = pattern1 '<-' expr {[eol] guard | eol pattern1 assign expr};

patternApply = id:stableId lpar:lpar [pats:patterns] rpar:rpar;
patternApplyVariadic = id:stableId lpar:lpar [pats:patterns comma:',']
[alias:plainidName at:'@'] splat:'_*' rpar:rpar;
parenthesizedPatterns = lpar:lpar [pats:patterns] rpar:rpar;
patternSimple =
  | wildcard
  | literal
  | select
  | patternApply
  | patternApplyVariadic
  | parenthesizedPatterns
  | plainidName
  | stableId
  ;
patternInfix = patternSimple {id [nl] patternSimple}+;
patternInfixOrSimple =
  | patternInfix
  | patternSimple
  ;
patternAliasedName = plainidName '@' patternInfixOrSimple;
# cannot use `type` here, as it breaks case clauses by interpreting the arrow
# as part of a function type
patternTyped = (plainidName | wildcard) ':' (infixExistentialType |
functionType);
pattern1 =
  | patternTyped
  | patternAliasedName
  | patternInfixOrSimple
  ;
patternTail = pipe:'|' pat:pattern1;
pattern = head:pattern1 {tail:patternTail};
patternsTail = comma:',' pats:patterns;
patternsSeq = head:pattern [tail:patternsTail];
patternVariadic = '_*';
patterns =
  | patternsSeq
  | patternVariadic
  ;

guardExpr = simpleOrCompoundExpr;
guard = ifkw:'if' expr:guardExpr;
caseBlockBody = blockBody &(nl ('case' | '}'));
caseClauseRhs =
  | block
  | caseBlockBody
  | expr
  ;
caseClause = casekw:case [nl1:nl] pat:pattern [[nl2:nl] guard:guard] [nl3:nl]
arr:arrow [rhs:caseClauseRhs];
caseClausesRest = [eol:eol] case:caseClause;
caseClauses = head:caseClause tail:{caseClausesRest};

typeParam = id:(id | wildcard) [sub:typeParamClause]
[b:tpLowerBound] [ub:tpUpperBound] vbs:{tpViewBound} cbs:{tpContextBound};
typeParamClause = lbrack:lbrack variantTypeParam {',' variantTypeParam}
rbrack:rbrack;
typeParams = typeParam {',' typeParam};
funTypeParamClause = lbrack:lbrack params:typeParams rbrack:rbrack;
variantTypeParam = {annotation} ['+' | '-'] typeParam;
tpLowerBound = '>:' type;
tpUpperBound = '<:' type;
tpViewBound = '<%' type;
tpContextBound = ':' type;

paramTypeLazy = arrow type;
paramTypeVariant = type '*';
paramType =
  | type
  | paramTypeLazy
  | paramTypeVariant;
param = {anno:annotation} id:id colon:':' tpe:paramType [assign:assign
rhs:expr];
variadicParam = {anno:annotation} id:id colon:':' tpe:paramType aster:'*';
params = init:{param ','} last:(variadicParam | param);
paramClause = [nl1:nl] lpar:lpar !'implicit' [params:params] rpar:rpar;
implicitParamClause = [nl1:nl] lpar:lpar implicitkw:'implicit' [nl2:nl]
params:params rpar:rpar;
paramClauses = explicit:{paramClause}+ [implicits:implicitParamClause];

classParam = {annotation} {modifier} [('val' | 'var')] id ':' paramType [assign expr];
classParams = classParam {',' classParam};
classParamClause = [nl] '(' [classParams] ')';
classParamClauses = {classParamClause} [[nl] '(' 'implicit' classParams ')'];

modifier = localModifier
  | accessModifier
  | 'override';
localModifier = 'abstract'
  | 'final'
  | 'sealed'
  | 'implicit'
  | 'lazy';
accessModifier = ('private' | 'protected') [accessQualifier];
accessQualifier = lbrack:lbrack (id | 'this') rbrack:rbrack;

annotation = '@' regularType {argumentsExpr};
constrAnnotation = '@' regularType argumentsExpr;

templateStatDef = {anno:annotation [nl]} {mod:modifier} def:def;
templateStatDcl = {anno:annotation [nl]} {mod:modifier} dcl:dcl;
templateStat1 =
  | comment
  | import
  | templateStatDef
  | templateStatDcl
  | expr;
templateStat =
  | templateStat1 eolComment
  | templateStat1
  ;
templateStatsTail = eol:eol stat:templateStat;
templateStats = head:templateStat tail:{templateStatsTail};
templateBody = [selftype:selfType] [nl1:nl] stats:templateStats;
template = [nl1:nl] lbrace:lbrace [stats:templateBody] rbrace:rbrace;
selfType = id [':' type] arrow
  | 'this' ':' type arrow;

import = 'import' importExpr {',' importExpr};
importExprPre = id '.';
importExpr = {importExprPre}+ (id | wildcard | importSelectors);
importSelectors = '{' {importSelector ','} (importSelector | wildcard) '}';
importSelector = id [arrow id | arrow wildcard];

dcl = key:'val' dcl:valDcl
  | key:'var' dcl:valDcl
  | key:'def' dcl:funDcl
  | key:typekw {nl} dcl:typeDcl;

valDcl = ids ':' type;
funDcl = sig:funSig [':' type:type];
typeDcl = id [typeParamClause] ['>:' type] ['<:' type];

patDefPats = head:patternInfixOrSimple tail:{comma:','
pat:patternInfixOrSimple};
varDefSimple = id:id [colon:':' tpe:type] assign:assign rhs:expr;
patDef = pats:patDefPats [colon:':' tpe:type] assign:assign rhs:expr;
uninitializedVarDef = ids ':' type assign:assign wildcard;
varDef =
  | varDefSimple
  | patDef
  | uninitializedVarDef
  ;

funSig = id:id [nl1:nl] [tparams:funTypeParamClause] [nl2:nl]
[paramss:paramClauses];
funDefFull = sig:funSig [nl1:nl] [colon:':' [nl2:nl] type:type] [nl3:nl]
assign:assign [nl4:nl] rhs:expr;
funDefUnit = sig:funSig [nl1:nl] lbrace:lbrace [rhs:blockBody]
rbrace:rbrace;
funDefCtor = 'this' paramClauses (assign:assign constrExpr | [nl] constrBlock);
funDef1 =
  | funDefFull
  | funDefUnit
  | funDefCtor
  ;
funDef = defkw:'def' def:funDef1;

typeDef = typekw:typekw nls:{nl} id:id [params:typeParamClause] assign:assign rhs:type;
valVarDef = valkw:'val' def:patDef;
varVarDef = varkw:'var' def:varDef;
patVarDef =
  | valVarDef
  | varVarDef
  ;
def =
  | patVarDef
  | funDef
  | typeDef
  | tmplDef
  ;

resultAnonFunc = params:anonFuncExprParams colon:':' type:compoundType
arrow:arrow rhs:blockBody;
resultExpr =
  | expr
  | arrow blockBody;
blockStatDef = {annotation} ['implicit' | 'lazy'] def;
blockStatTemplDef = {annotation} {localModifier} tmplDef;
blockStat1 =
  | comment
  | import
  | blockStatDef
  | blockStatTemplDef
  | expr
  ;
blockStat =
  | blockStat1 eolComment
  | blockStat1
  ;
blockRest = eol:eol stat:blockStat;
blockBody = head:blockStat tail:{blockRest} [eol result:resultExpr];
blockExprContent =
  | caseClauses
  | blockBody
  ;
block = lbrace:lbrace body:blockExprContent rbrace:rbrace;
statBlock = lbrace:lbrace body:blockBody rbrace:rbrace;
caseBlock = lbrace:lbrace body:caseClauses rbrace:rbrace;

classDef = id [typeParamClause] {constrAnnotation} [accessModifier] classParamClauses classTemplateOpt;
traitDef = [nl] id [nl] [typeParamClause] [nl] traitTemplateOpt;
objectDef = id classTemplateOpt;
classTemplateOpt = 'extends' classTemplate | [['extends'] template];
traitTemplateOpt = 'extends' traitTemplate | [['extends'] template];
classTemplate = [earlyDefs] classParents [template];
traitTemplate = [earlyDefs] traitParents [template];
classParents = constr {'with' annotOrRegularType};
traitParents = annotOrRegularType {'with' annotOrRegularType};
constr = annotOrRegularType {argumentsExpr};
earlyDefs = lbrace:lbrace [earlyDef {eol earlyDef}] rbrace:rbrace [nl] 'with';
earlyDef = {annotation [nl]} {modifier} patVarDef;
class = [case] 'class' classDef;
module = [case] 'object' objectDef;
trait = 'trait' traitDef;
tmplDef =
  | class
  | module
  | trait
  ;

constrExpr = selfInvocation
  | constrBlock;
constrBlock = '{' selfInvocation {eol blockStat} '}';
selfInvocation = 'this' argumentsExpr {argumentsExpr};

topStat =
  | comment
  | {annotation [nl]} {modifier} tmplDef
  | import
  | packaging
  | packageObject
  | nl
  ;
topStatSeq = topStat {eol topStat};
packaging = 'package' qualId [nl] '{' topStatSeq '}';
packageObject = 'package' 'object' objectDef;
package = 'package' qualId;

compilationUnit = initialcomment:{comment nl} package:{package eol}
stats:topStatSeq;
